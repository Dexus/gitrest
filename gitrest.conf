# gitrest

# servers configuration
# git clone https://github.com/Dexus/gitrest.git .
# mkdir /var/cache/nginx/gitrest
# chown -R www:www /var/cache/nginx/
# mv gitrest.conf /etc/nginx/conf.d/gitrest.conf
# mv index.html /www/index.html
# rc-service nginx restart
root /www;
proxy_cache_path /var/cache/nginx/gitrest
		 use_temp_path=off levels=1:2
		 max_size=1g inactive=7d
		 keys_zone=gitrest.cache:10m;
gzip on;
access_log off;
log_format gitrest '[$host $upstream_cache_status] "$request" $status "$http_referer" "$http_user_agent"';

# file extension to mime-type mapping
# kind of workaround because nginx can detect mime-type only for local file
map $extension $detect_content_type {
    ~*^(?:appcache|manifest)$    text/cache-manifest;
    ~*^atom$                     application/atom+xml;
    ~*^bat$               	 	 application/x-msdownload;
    ~*^coffee$                   text/coffeescript;
    ~*^css$                      text/css;
    ~*^csv$                      text/csv;
    ~*^eot$               	 	 application/vnd.ms-fontobject;
    ~*^geojson$                  application/vnd.geo+json;
    ~*^(?:hbs|handlebars)$    	 text/x-handlebars-template;
    ~*^htc$                      text/x-component;
    ~*^html?$                  	 text/html;
    ~*^ics$		                 text/calendar;
    ~*^jscad$                    application/javascript;
    ~*^json$                     application/json;
    ~*^jsonld$                   application/ld+json;
    ~*^kml$               	 	 application/vnd.google-earth.kml+xml;
    ~*^(?:md|markdown)$          text/markdown;
    ~*^m?js$                     application/javascript;
    ~*^mhtml$                    multipart/related;
    ~*^n3$                       text/n3;
    ~*^nt$                       application/n-triples;
    ~*^otf$               	     font/otf;
    ~*^(?:owl|rdf)$              application/rdf+xml;
    ~*^pdf$               	     application/pdf;
    ~*^rss$                      application/rss+xml;
    ~*^shexc?$                   text/shex;
    ~*^svg$               	     image/svg+xml;
    ~*^swf$               	     application/x-shockwave-flash;
    ~*^tt(?:c|f)$                application/x-font-ttf;
    ~*^ttl$                      text/turtle;
    ~*^vcard$            	     text/vcard;
    ~*^vcf$ 			         text/x-vcard;
    ~*^vtt$                      text/vtt;
    ~*^woff$              	     application/font-woff;
    ~*^woff2$             	     application/font-woff2;
    ~*^xht(?:ml)?$               application/xhtml+xml;
    ~*^xml$ 			         text/xml;
    ~*^(?:xsl|xsd)$          	 application/xml;
    ~*^xslt$                     application/xslt+xml;
    ~*^ya?ml$          	         text/yaml;
    ~*^wasm$                     application/wasm;
    default               	 	 '';
}

# defines which extensions should include charset definition
map $extension $content_type_charset_string {
    ~*^(?:bat|eot|htc|kml|nt|otf|pdf|svg|swf|ttc|ttf|woff2?|wasm)$ '';
    default '; charset=utf-8';
}

map $detect_content_type $detect_content_type_with_fallback {
    '' $upstream_http_content_type;
    default $detect_content_type$content_type_charset_string;
}

map $host $origin {
    ~*^gl(cdn)?.git.rest$ gitlab.com;
    ~*^bb(cdn)?.git.rest$ bitbucket.org;
    ~*^raw(cdn)?.git.rest$ raw.githubusercontent.com;
    ~*^gist(cdn)?.git.rest$ gist.githubusercontent.com;
}

map "$detect_content_type:$host" $check_redirect {
    ~*:\w+cdn.git.rest$ 0;
    ~*^.+: 0;
    default 1;
}

map "$host:$rev" $cache_control {
    ~*^\w+cdn.git.rest:(?!master).+$ 'public, immutable';
    default 's-maxage=300, public';
}

map "$host:$rev" $expires {
    ~*^\w+cdn.git.rest:(?!master).+$ 14d;
    default 1m;
}

server {
    listen 80;
    listen [::]:80;
    server_name *.git.rest;
    access_log /var/log/nginx/access.log gitrest;

    location = /index.html {
        ssi on;
        if ($host != 'raw.git.rest') {
            return 301 $scheme://raw.git.rest;
        }
    }

    location ~* ^/.+/.+/.+/(.+/)*$ {
        rewrite ^(.*)/$ $1/index.html last;
    }

    location ~* ^/[^/]+/[^/]+/(?<rev>[^/]+)/.+?(?:\.(?<extension>[a-zA-Z0-9]+))?$ {
        if ($check_redirect) {
            add_header Content-Type text/html;
            return 301 https://$origin$request_uri;
        }

        # to be able to resolve remote server name from a variable
        resolver 8.8.8.8;

        proxy_read_timeout 10s;

        # caching
        proxy_cache gitrest.cache;
        proxy_cache_key "$origin$uri";
        proxy_cache_revalidate on;
        proxy_cache_valid any 1m;
        proxy_cache_use_stale updating;
        proxy_cache_background_update on;
        proxy_cache_lock on;

        proxy_force_ranges on;
        proxy_http_version 1.1;
        proxy_intercept_errors on;
        proxy_pass https://$origin;

        # we need to hide these headers in order to redefine them
        # if we don't, they will be set twice
        proxy_hide_header Status;
        proxy_hide_header Expires;
        proxy_hide_header Content-Type;
        proxy_hide_header Cache-Control;
        proxy_hide_header X-Frame-Options;
        proxy_hide_header X-XSS-Protection;
        proxy_hide_header Content-Disposition;
        proxy_hide_header Content-Security-Policy;
        proxy_hide_header Access-Control-Allow-Origin;

        expires $expires;

        # robots, go away!
        add_header X-Robots-Tag none;
        add_header Cache-Control $cache_control;
        add_header Access-Control-Allow-Origin *;
        add_header X-GitRest-Cache-Status $upstream_cache_status;
        add_header Content-Type $detect_content_type_with_fallback;
    }
}
